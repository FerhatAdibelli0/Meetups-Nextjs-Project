{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\React-Course\\\\23-Nextjs-onwards-to-a-bigger-project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetailPage from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nfunction MeetupDetail(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetailPage, {\n    id: props.meetupsData.id,\n    title: props.meetupsData.title,\n    image: props.meetupsData.imae,\n    address: props.meetupsData.address,\n    description: props.meetupsData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://maxpayne35:qGBr7naSXYmEYnw@cluster0.sp51h.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = await client.db();\n  const meetups = await db.collection(\"meetups\").find({}, {\n    _id: 1\n  }).toArray();\n  return {\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })),\n    fallback: false\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://maxpayne35:qGBr7naSXYmEYnw@cluster0.sp51h.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = await client.db();\n  const selectedMettup = db.collection(\"meetups\").findOne({\n    _id: ObjectId()\n  });\n  return {\n    props: {\n      meetupsData: {\n        id: selectedMettup._id,\n        title: selectedMettup.title,\n        image: selectedMettup.image,\n        address: selectedMettup.address,\n        description: selectedMettup.description\n      }\n    }\n  };\n}\nexport default MeetupDetail;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/React-Course/23-Nextjs-onwards-to-a-bigger-project/pages/[meetupId]/index.js"],"names":["MeetupDetailPage","MongoClient","ObjectId","MeetupDetail","props","meetupsData","id","title","imae","address","description","getStaticPaths","client","connect","db","meetups","collection","find","_id","toArray","paths","map","meetup","params","meetupId","toString","fallback","getStaticProps","context","selectedMettup","findOne","image"],"mappings":";;AAAA,OAAOA,gBAAP,MAA6B,uCAA7B;AACA,SAASC,WAAT,EAAqBC,QAArB,QAAqC,SAArC;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,sBACE,QAAC,gBAAD;AACE,IAAA,EAAE,EAAEA,KAAK,CAACC,WAAN,CAAkBC,EADxB;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,WAAN,CAAkBE,KAF3B;AAGE,IAAA,KAAK,EAAEH,KAAK,CAACC,WAAN,CAAkBG,IAH3B;AAIE,IAAA,OAAO,EAAEJ,KAAK,CAACC,WAAN,CAAkBI,OAJ7B;AAKE,IAAA,WAAW,EAAEL,KAAK,CAACC,WAAN,CAAkBK;AALjC;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,yGADmB,CAArB;AAIA,QAAMC,EAAE,GAAG,MAAMF,MAAM,CAACE,EAAP,EAAjB;AACA,QAAMC,OAAO,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,SAAd,EAAyBC,IAAzB,CAA8B,EAA9B,EAAkC;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAAlC,EAA8CC,OAA9C,EAAtB;AAEA,SAAO;AACLC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAEF,MAAM,CAACJ,GAAP,CAAWO,QAAX;AADJ;AADsB,KAAb,CAAZ,CADF;AAMLC,IAAAA,QAAQ,EAAE;AANL,GAAP;AAQD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMJ,QAAQ,GAAGI,OAAO,CAACL,MAAR,CAAeC,QAAhC;AAEA,QAAMZ,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,yGADmB,CAArB;AAIA,QAAMC,EAAE,GAAG,MAAMF,MAAM,CAACE,EAAP,EAAjB;AACA,QAAMe,cAAc,GAAGf,EAAE,CAACE,UAAH,CAAc,SAAd,EAAyBc,OAAzB,CAAiC;AAAEZ,IAAAA,GAAG,EAAEhB,QAAQ;AAAf,GAAjC,CAAvB;AAEA,SAAO;AACLE,IAAAA,KAAK,EAAE;AACLC,MAAAA,WAAW,EAAE;AACXC,QAAAA,EAAE,EAAEuB,cAAc,CAACX,GADR;AAEXX,QAAAA,KAAK,EAAEsB,cAAc,CAACtB,KAFX;AAGXwB,QAAAA,KAAK,EAAEF,cAAc,CAACE,KAHX;AAIXtB,QAAAA,OAAO,EAAEoB,cAAc,CAACpB,OAJb;AAKXC,QAAAA,WAAW,EAAEmB,cAAc,CAACnB;AALjB;AADR;AADF,GAAP;AAWD;AAED,eAAeP,YAAf","sourcesContent":["import MeetupDetailPage from \"../../components/meetups/MeetupDetail\";\r\nimport { MongoClient,ObjectId } from \"mongodb\";\r\n\r\nfunction MeetupDetail(props) {\r\n  return (\r\n    <MeetupDetailPage\r\n      id={props.meetupsData.id}\r\n      title={props.meetupsData.title}\r\n      image={props.meetupsData.imae}\r\n      address={props.meetupsData.address}\r\n      description={props.meetupsData.description}\r\n    />\r\n  );\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://maxpayne35:qGBr7naSXYmEYnw@cluster0.sp51h.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n\r\n  const db = await client.db();\r\n  const meetups = await db.collection(\"meetups\").find({}, { _id: 1 }).toArray();\r\n\r\n  return {\r\n    paths: meetups.map((meetup) => ({\r\n      params: {\r\n        meetupId: meetup._id.toString(),\r\n      },\r\n    })),\r\n    fallback: false,\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  const meetupId = context.params.meetupId;\r\n\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://maxpayne35:qGBr7naSXYmEYnw@cluster0.sp51h.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n\r\n  const db = await client.db();\r\n  const selectedMettup = db.collection(\"meetups\").findOne({ _id: ObjectId() });\r\n\r\n  return {\r\n    props: {\r\n      meetupsData: {\r\n        id: selectedMettup._id,\r\n        title: selectedMettup.title,\r\n        image: selectedMettup.image,\r\n        address: selectedMettup.address,\r\n        description: selectedMettup.description,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetail;\r\n"]},"metadata":{},"sourceType":"module"}